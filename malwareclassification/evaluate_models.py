
from malwareclassification import models
from malwareclassification import neural_network as NN
import numpy as np
import pickle
import keras.optimizers
from keras.models import load_model
import tensorflow as tf
import joblib
import pandas as pd


def evaluate_on_test_set():

    # loaded_model = joblib.load("models/model_GaussianNB.joblib")
    # GNB.test_gaussian_naive_bayes_classifier(loaded_model, val_data, val_labels)
    #
    # loaded_model = joblib.load("models/model_MultinomialNB.joblib")
    # MNB.test_multi_naive_bayes_classifier(loaded_model, val_data, val_labels)
    #
    # loaded_model = joblib.load("models/model_ComplementNB.joblib")
    # CNB.test_complement_naive_bayes_classifier(loaded_model, val_data, val_labels)
    #
    # loaded_model = joblib.load("models/model_BernoulliNB.joblib")
    # BNB.test_bernoulli_naive_bayes_classifier(loaded_model, val_data, val_labels)
    #
    # loaded_model = joblib.load("models/model_DecisionTreeClassifier.joblib")
    # DT.test_decision_tree_classifier(loaded_model, val_data, val_labels)
    #
    # loaded_model = joblib.load("models/model_RandomForestClassifier.joblib")
    # RF.test_random_forest_classifier(loaded_model, val_data, val_labels)
    
    # loaded_model = joblib.load("models/model_KNeighborsClassifier.joblib")
    # KNN.test_knn_classifier(loaded_model, val_data, val_labels)

    # loaded_model = joblib.load("models/model_LogisticRegression.joblib")
    # LR.test_logistic_regression_classifier(loaded_model, val_data, val_labels)

    loaded_model = joblib.load("models/model_SVC.joblib")
    SVM.test_svm_classifier(loaded_model, val_data, val_labels)

    # loaded_model = load_model("models/best_model_10_10.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_10_200.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_50_50.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_50_200.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_100_200.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_200_10.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_200_50.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_200_100.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_200_200.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_200_200_200.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_200_200_200_200.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_200_300.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)
    #
    # loaded_model = load_model("models/best_model_300_200.h5")
    # NN.test_neural_network(loaded_model, val_data, val_labels)


if __name__ == "__main__":
    #评价机器学习和dnn不同架构
    # 测试数据
    val_data = pd.read_csv('..//data//x_test01.csv')
    val_labels = pd.read_csv('..//data//y_test01.csv')
    # initialize sklearn models
    GNB = models.GaussianNaiveBayes()
    MNB = models.MultinomialNaiveBayes()
    CNB = models.ComplementNaiveBayes()
    BNB = models.BernoulliNaiveBayes()
    DT = models.DecisionTree()
    RF = models.RandomForest()
    KNN = models.KNearestNeighbors()
    LR = models.LogRegression()
    SVM = models.SupportVectorMachine()


    evaluate_on_test_set()
